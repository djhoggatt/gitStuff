[core]
	editor = vim
[help]
	autocorrect = 20
[submodule]
	recurse = false
[alias]
	graph = "!f() { git-graph }; f"
	cleanup = ! git branch -d `git branch --merged | grep -v \\*`
	stat = log --stat
	pup = !git restore . && git pull && git submodule init && git submodule update && git submodule status && git status
	df = "!bash -c '\
	rresolve() { \
	    if git rev-parse -q --verify \"$1^{commit}\" >/dev/null 2>&1; then echo \"$1\"; \
	    elif git rev-parse -q --verify \"origin/$1^{commit}\" >/dev/null 2>&1; then echo \"origin/$1\"; \
	    else return 1; fi; \
	    }; \
	if [ $# -eq 2 ]; then \
	    base=$(rresolve \"$1\") || { echo \"Unknown ref: $1\" >&2; exit 1; }; \
	    head=$(rresolve \"$2\") || { echo \"Unknown ref: $2\" >&2; exit 1; }; \
	elif [ $# -eq 1 ]; then \
	    head=$(rresolve \"$1\") || { echo \"Unknown ref: $1\" >&2; exit 1; }; \
	    base=$(git rev-parse -q \"$head~1\" 2>/dev/null || git merge-base \"$head\" HEAD); \
	else \
	    head=HEAD; base=HEAD~1; \
	fi; \
	while file=$(git diff --name-only \"$base\" \"$head\" | fzf --exit-0); do \
	    [ -z \"$file\" ] && break; \
	    git difftool -y -t vscode \"$base\" \"$head\" -- \"$file\"; \
	done' -"
[difftool "vscode"]
	cmd = code --wait --reuse-window --diff "$LOCAL" "$REMOTE"
[diff]
	tool = vscode
[merge]
	tool = vimdiff
